@model aerables.Models.Device

@{
    ViewBag.Title = "Details";
}

<style>

    .demo-container {
        box-sizing: border-box;
        width: 850px;
        height: 450px;
        padding: 20px 15px 15px 15px;
        margin: 15px auto 30px auto;
        border: 1px solid #ddd;
        background: #fff;
        background: linear-gradient(#f6f6f6 0, #fff 50px);
        background: -o-linear-gradient(#f6f6f6 0, #fff 50px);
        background: -ms-linear-gradient(#f6f6f6 0, #fff 50px);
        background: -moz-linear-gradient(#f6f6f6 0, #fff 50px);
        background: -webkit-linear-gradient(#f6f6f6 0, #fff 50px);
        box-shadow: 0 3px 10px rgba(0,0,0,0.15);
        -o-box-shadow: 0 3px 10px rgba(0,0,0,0.1);
        -ms-box-shadow: 0 3px 10px rgba(0,0,0,0.1);
        -moz-box-shadow: 0 3px 10px rgba(0,0,0,0.1);
        -webkit-box-shadow: 0 3px 10px rgba(0,0,0,0.1);
    }

    .demo-placeholder {
        width: 100%;
        height: 100%;
        font-size: 14px;
        line-height: 1.2em;
    }

    .legend table {
        border-spacing: 5px;
    }
</style>
<h2>Details</h2>

<div>
    <h4>Device</h4>
	<hr />
    <dl class="dl-horizontal">
        <dt>
            @Html.DisplayNameFor(model => model.Device_Id)
        </dt>

        <dd>
            @Html.DisplayFor(model => model.Device_Id)
        </dd>

        <dt>
            @Html.DisplayNameFor(model => model.Name)
        </dt>

        <dd>
            @Html.DisplayFor(model => model.Name)
        </dd>

        <dt>
            @Html.DisplayNameFor(model => model.Field1)
        </dt>

        <dd>
            @Html.DisplayFor(model => model.Field1)
        </dd>

        <dt>
            @Html.DisplayNameFor(model => model.Created_at)
        </dt>

        <dd>
            @Html.DisplayFor(model => model.Created_at)
        </dd>

        <dt>
            @Html.DisplayNameFor(model => model.Updated_at)
        </dt>

        <dd>
            @Html.DisplayFor(model => model.Updated_at)
        </dd>

        <dt>
            @Html.DisplayNameFor(model => model.Last_entry)
        </dt>

        <dd>
            @Html.DisplayFor(model => model.Last_entry)
        </dd>

    </dl>
</div>


<div class="demo-container">
    <div id="placeholder" class="demo-placeholder"></div>
</div>

<table class="table table-bordered">
    <tr><th>Μέτρηση ID</th><th>Ημερομηνία Μέτρησης</th><th>Τιμή</th></tr>

    @foreach (var Metrisi in Model.Measurements)
    {
        <tr><td>@Metrisi.Entry_Id</td><td>@Metrisi.Created_at.ToString("dd/MM/yyyy hh:mm:ss")</td><td>@Metrisi.Measurement</td></tr>
    }
</table>


<p>
    @Html.ActionLink("Edit", "Edit", new { id = Model.Id }) |
    @Html.ActionLink("Back to List", "Index")
</p>

@section Scripts {

<script type="text/javascript">

    $(function () {

        // We use an inline data source in the example, usually data would
        // be fetched from a server

        var data = [],
			totalPoints = 300;

        function getRandomData() {

            if (data.length > 0)
                data = data.slice(1);

            // Do a random walk

            while (data.length < totalPoints) {

                var prev = data.length > 0 ? data[data.length - 1] : 50,
					y = prev + Math.random() * 10 - 5;

                if (y < 0) {
                    y = 0;
                } else if (y > 100) {
                    y = 100;
                }

                data.push(y);
            }

            // Zip the generated y values with the x values

            var res = [];
            for (var i = 0; i < data.length; ++i) {
                res.push([i, data[i]])
            }

            return res;
        }

        // Set up the control widget

        var updateInterval = 30;
        
        var plot = $.plot("#placeholder", [getRandomData()], {
            series: {
                shadowSize: 0	// Drawing is faster without shadows
            },
            yaxis: {
                min: 0,
                max: 100
            },
            xaxis: {
                show: false
            }
        });

        function update() {

            plot.setData([getRandomData()]);

            // Since the axes don't change, we don't need to call plot.setupGrid()

            plot.draw();
            setTimeout(update, updateInterval);
        }

        update();


    });

</script>

}