@model aerables.Models.Device

@{
    ViewBag.Title = "Details";
}

<style>

    .demo-container {
        box-sizing: border-box;
        width: 850px;
        height: 450px;
        padding: 20px 15px 15px 15px;
        margin: 15px auto 30px auto;
        border: 1px solid #ddd;
        background: #fff;
        background: linear-gradient(#f6f6f6 0, #fff 50px);
        background: -o-linear-gradient(#f6f6f6 0, #fff 50px);
        background: -ms-linear-gradient(#f6f6f6 0, #fff 50px);
        background: -moz-linear-gradient(#f6f6f6 0, #fff 50px);
        background: -webkit-linear-gradient(#f6f6f6 0, #fff 50px);
        box-shadow: 0 3px 10px rgba(0,0,0,0.15);
        -o-box-shadow: 0 3px 10px rgba(0,0,0,0.1);
        -ms-box-shadow: 0 3px 10px rgba(0,0,0,0.1);
        -moz-box-shadow: 0 3px 10px rgba(0,0,0,0.1);
        -webkit-box-shadow: 0 3px 10px rgba(0,0,0,0.1);
    }

    .demo-placeholder {
        width: 100%;
        height: 100%;
        font-size: 14px;
        line-height: 1.2em;
    }

    .legend table {
        border-spacing: 5px;
    }
</style>
<h2>Details</h2>

<div>
    <h4>Device</h4>
	<hr />
    <div class="row">
        <div class="col-md-6">
            <dl class="dl-horizontal">
                <dt>@Html.DisplayNameFor(model => model.Device_Id)</dt>
                <dd>@Html.DisplayFor(model => model.Device_Id)</dd>

                <dt>@Html.DisplayNameFor(model => model.Name)</dt>
                <dd>@Html.DisplayFor(model => model.Name)</dd>

                <dt>@Html.DisplayNameFor(model => model.Field1)</dt>
                <dd>@Html.DisplayFor(model => model.Field1)</dd>

                @if (!string.IsNullOrWhiteSpace(Model.Field2)) { 
                <dt>@Html.DisplayNameFor(model => model.Field2)</dt>
                <dd>@Html.DisplayFor(model => model.Field2)</dd>
                }
                
                @if (!string.IsNullOrWhiteSpace(Model.Field3))
                {
                    <dt>@Html.DisplayNameFor(model => model.Field3)</dt>
                    <dd>@Html.DisplayFor(model => model.Field3)</dd>
                }
                @if (!string.IsNullOrWhiteSpace(Model.Field4))
                {
                    <dt>@Html.DisplayNameFor(model => model.Field4)</dt>
                    <dd>@Html.DisplayFor(model => model.Field4)</dd>
                }
                
                <dt>@Html.DisplayNameFor(model => model.Updated_at)</dt>
                <dd>@Html.DisplayFor(model => model.Updated_at)</dd>

                <dt>@Html.DisplayNameFor(model => model.Latitude)</dt>
                <dd>@Html.DisplayFor(model => model.Latitude)</dd>

                <dt>@Html.DisplayNameFor(model => model.Longitude)</dt>
                <dd>@Html.DisplayFor(model => model.Longitude)</dd>
            </dl>
        </div>
        <div class="col-md-6">
            <iframe width="450" height="260" frameborder="0" scrolling="no" src="http://api.thingspeak.com/channels/12153/maps/channel_show?width=450&height=260&zoom=8"></iframe>
        </div>
    </div>
</div>


<div class="demo-container">
    <div id="placeholder" class="demo-placeholder"></div>
</div>

<table class="table table-bordered">
    <tr><th>Date</th><th>@Model.Field1</th><th>@Model.Field2</th><th>@Model.Field3</th><th>@Model.Field4</th></tr>

    @foreach (var Metrisi in Model.Measurements.OrderByDescending(x=>x.Created_at).Take(20))
    {
        <tr>
            <td>@Metrisi.Created_at.ToLocalTime().ToString("dd/MM/yyyy HH:mm:ss")</td>
            <td>@Metrisi.MeasurementField1</td>
            <td>@Metrisi.MeasurementField2</td>
            <td>@Metrisi.MeasurementField3</td>
            <td>@Metrisi.MeasurementField4</td>
        </tr>
    }
</table>


<p>
    @Html.ActionLink("Edit", "Edit", new { id = Model.Id }) |
    @Html.ActionLink("Back to List", "Index")
</p>

@section Scripts {

<script type="text/javascript">

    $(function () {

        var d1 = [
            @foreach (var Metrisi in Model.Measurements.Where(x => x.Created_at > DateTime.Now.AddDays(-1)).OrderByDescending(x => x.Created_at))
            {
                @Html.Raw(string.Format("[{1},{0}],", Metrisi.MeasurementField1, Metrisi.Created_at.Subtract(new DateTime(1970, 1, 1)).TotalMilliseconds))
            }
        ];

        var d2 = [
            @foreach (var Metrisi in Model.Measurements.Where(x => x.Created_at > DateTime.Now.AddDays(-1)).OrderByDescending(x => x.Created_at))
                {
                    @Html.Raw(string.Format("[{1},{0}],", Metrisi.MeasurementField2, Metrisi.Created_at.Subtract(new DateTime(1970, 1, 1)).TotalMilliseconds))
                }
        ];
        var d3 = [
    @foreach (var Metrisi in Model.Measurements.Where(x => x.Created_at > DateTime.Now.AddDays(-1)).OrderByDescending(x => x.Created_at))
        {
            @Html.Raw(string.Format("[{1},{0}],", Metrisi.MeasurementField3, Metrisi.Created_at.Subtract(new DateTime(1970, 1, 1)).TotalMilliseconds))
        }
        ];
        var d4 = [
    @foreach (var Metrisi in Model.Measurements.Where(x => x.Created_at > DateTime.Now.AddDays(-1)).OrderByDescending(x => x.Created_at))
        {
            @Html.Raw(string.Format("[{1},{0}],", Metrisi.MeasurementField4, Metrisi.Created_at.Subtract(new DateTime(1970, 1, 1)).TotalMilliseconds))
        }
        ];

        $.plot("#placeholder", [
            {
                label: "@Model.Field1",
                data: d1
            },
            {
                label: "@Model.Field2",
                data: d2
            }, 
            {
                label: "@Model.Field3",
                data: d3
            },
            {
                label: "@Model.Field4",
                data: d4
            }], {
            xaxis: {
                mode: "time"
            },
            legend: {
                show: true
            },
            series: {
                lines: {
                    show: true
                }
            },
            grid: {
                hoverable: true,
                clickable: true
            },
        });



        $("<div id='tooltip'></div>").css({
            position: "absolute",
            display: "none",
            border: "1px solid #fdd",
            padding: "1px",
            "background-color": "#fee",
            opacity: 0.80
        }).appendTo("body");

        $("#placeholder").bind("plothover", function (event, pos, item) {

            if (item) {
                var x = item.datapoint[0].toFixed(0),
					y = item.datapoint[1].toFixed(0);
                var date = new Date(x * 1);
                var strDate = date.getDate() + "/" + date.getMonth() + "/" + date.getFullYear() + " " + date.getHours() + ":" + date.getMinutes() + ":" + date.getSeconds();
                $("#tooltip").html(item.series.label + " of " + strDate + " = " + y + " " )
					.css({ top: item.pageY + 5, left: item.pageX + 5 })
					.fadeIn(200);
            } else {
                $("#tooltip").hide();
            }
            
        });

        $("#placeholder").bind("plotclick", function (event, pos, item) {
            if (item) {
                plot.highlight(item.series, item.datapoint);
            }
        });

    });

    setTimeout(function () {
        window.location.reload(1);
    }, 100000);
</script>

}